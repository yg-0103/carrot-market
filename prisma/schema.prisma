// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// foreign key 를 위해 prisma 에서 확인
// client : previewFeatures = ["referentialIntegrity"]
// db : referentialIntergrity = "prisma"  

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] 
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  name String
  phone BigInt? @unique
  email String? @unique
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  posts Post[]
  comments Comment[]
  wonders Wonder[]
  favs Fav[]
  sales Sale[]
  puchases Puchase[]
  records Record[]
  writtenReviews Review[] @relation(name: "writtenReview")
  receiveReviews Review[] @relation(name: "receiveReview")
  stremas Stream[]
  messages Message[]
}



model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade: User가 삭제되면 Token도 같이 삭제
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Product {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade: User가 삭제되면 Token도 같이 삭제
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  name String
  image String
  price Int
  description String @db.MediumText
  favs Fav[]
  sales Sale[]
  purchases Puchase[]
  records Record[]
}

model Post {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  question String @db.MediumText
  latitude Float?
  longitude Float?
  comments Comment[]
  wonders Wonder[]
}

model Comment {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) 
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  comment String @db.MediumText
}

model Wonder {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) 
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Review {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review String @db.MediumText
  createdBy User @relation(name: "writtenReview", fields: [createdById], references: [id], onDelete: Cascade) 
  createdById Int
  createdFor User @relation(name: "receiveReview", fields: [createdForId], references: [id], onDelete: Cascade) 
  createdForId Int
  rating Int 
}


model Fav {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Sale {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Puchase {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Record {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind Kind
  updatedAt DateTime @updatedAt 
}

enum Kind {
  Fav
  Purchase
  Sale
}


model Stream {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  name String
  price Int
  description String @db.MediumText
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  message String @db.MediumText
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade) 
  streamId Int
}